// hooks/useGoogleSheets.js

import { useState, useEffect, useCallback, useRef } from 'react';
import {SHEETS_CONFIG} from "../services/sheetsConfig.js";
import googleSheetsData from "../services/GoogleSheetsData.js";
import googleSheetsAuth from "../services/GoogleSheetsAuth.js";

/**
 * Google Sheets Îç∞Ïù¥ÌÑ∞Î•º Í¥ÄÎ¶¨ÌïòÎäî Ïª§Ïä§ÌÖÄ ÌõÖ
 * @param {Object} options - ÏòµÏÖò Í∞ùÏ≤¥
 * @param {string} options.spreadsheetId - Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID
 * @param {string} options.sheetName - ÏãúÌä∏Î™Ö
 * @param {string} options.range - Îç∞Ïù¥ÌÑ∞ Î≤îÏúÑ
 * @param {boolean} options.autoFetch - ÏûêÎèôÏúºÎ°ú Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ÏßÄ Ïó¨Î∂Ä (Í∏∞Î≥∏Í∞í: true)
 * @param {number} options.refetchInterval - ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® Í∞ÑÍ≤© (Î∞ÄÎ¶¨Ï¥à, 0Ïù¥Î©¥ ÎπÑÌôúÏÑ±Ìôî)
 * @param {Function} options.onSuccess - ÏÑ±Í≥µ ÏΩúÎ∞±
 * @param {Function} options.onError - ÏóêÎü¨ ÏΩúÎ∞±
 * @returns {Object} ÌõÖ Î∞òÌôòÍ∞í
 */
export const useGoogleSheets = (options = {}) => {
    const {
        spreadsheetId = SHEETS_CONFIG.spreadsheetId,
        sheetName = SHEETS_CONFIG.sheetName,
        range = SHEETS_CONFIG.range,
        autoFetch = true,
        refetchInterval = 0,
        onSuccess,
        onError
    } = options;

    // ÏÉÅÌÉú Í¥ÄÎ¶¨
    const [data, setData] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);
    const [lastFetch, setLastFetch] = useState(null);

    // refÎ•º ÏÇ¨Ïö©Ìï¥ÏÑú ÏµúÏã† ÏÉÅÌÉú Ï∂îÏ†Å
    const isAuthenticatedRef = useRef(false);
    const abortControllerRef = useRef(null);
    const intervalRef = useRef(null);

    /**
     * ÏóêÎü¨ Ï≤òÎ¶¨ Ìó¨Ìçº
     */
    const handleError = useCallback((err, context = '') => {
        const errorMessage = err?.message || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
        const fullError = context ? `${context}: ${errorMessage}` : errorMessage;

        console.error('useGoogleSheets ÏóêÎü¨:', fullError, err);
        setError(fullError);

        if (onError) {
            onError(fullError, err);
        }
    }, [onError]);

    /**
     * ÏÑ±Í≥µ Ï≤òÎ¶¨ Ìó¨Ìçº
     */
    const handleSuccess = useCallback((fetchedData) => {
        setData(fetchedData);
        setError(null);
        setLastFetch(new Date().toISOString());

        if (onSuccess) {
            onSuccess(fetchedData);
        }
    }, [onSuccess]);

    /**
     * Ïù∏Ï¶ù ÏàòÌñâ
     */
    const authenticate = useCallback(async () => {
        try {
            // Ïù¥ÎØ∏ Ïù∏Ï¶ùÎêú ÏÉÅÌÉúÎ©¥ Í±¥ÎÑàÎõ∞Í∏∞
            if (googleSheetsAuth.isAuthenticated()) {
                isAuthenticatedRef.current = true;
                return true;
            }

            console.log('üîê Google Sheets Ïù∏Ï¶ù ÏãúÏûë...');
            await googleSheetsAuth.authenticate();
            isAuthenticatedRef.current = true;
            console.log('‚úÖ Ïù∏Ï¶ù ÏôÑÎ£å');
            return true;
        } catch (err) {
            isAuthenticatedRef.current = false;
            handleError(err, 'Ïù∏Ï¶ù Ïã§Ìå®');
            return false;
        }
    }, [handleError]);

    /**
     * Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
     */
    const fetchData = useCallback(async (options = {}) => {
        // Ïù¥ÎØ∏ ÏßÑÌñâ Ï§ëÏù∏ ÏöîÏ≤≠Ïù¥ ÏûàÏúºÎ©¥ Ï∑®ÏÜå
        if (abortControllerRef.current) {
            abortControllerRef.current.abort();
        }

        // ÏÉàÎ°úÏö¥ AbortController ÏÉùÏÑ±
        abortControllerRef.current = new AbortController();

        const {
            showLoading = true,
            targetSpreadsheetId = spreadsheetId,
            targetSheetName = sheetName,
            targetRange = range
        } = options;

        try {
            if (showLoading) {
                setLoading(true);
            }

            // Ïù∏Ï¶ù ÌôïÏù∏ Î∞è ÏàòÌñâ
            const isAuthenticated = await authenticate();
            if (!isAuthenticated) {
                return null;
            }

            // ÏöîÏ≤≠Ïù¥ Ï∑®ÏÜåÎêòÏóàÎäîÏßÄ ÌôïÏù∏
            if (abortControllerRef.current?.signal.aborted) {
                return null;
            }

            console.log(`üìä Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÏûë: ${targetSheetName}!${targetRange}`);

            // Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
            const result = await googleSheetsData.fetchSheetData(
                targetSpreadsheetId,
                targetSheetName,
                targetRange
            );

            // ÏöîÏ≤≠Ïù¥ Ï∑®ÏÜåÎêòÏóàÎäîÏßÄ Îã§Ïãú ÌôïÏù∏
            if (abortControllerRef.current?.signal.aborted) {
                return null;
            }

            handleSuccess(result);
            console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏôÑÎ£å');
            return result;

        } catch (err) {
            // AbortErrorÎäî Î¨¥Ïãú
            if (err.name === 'AbortError') {
                console.log('üìù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏöîÏ≤≠Ïù¥ Ï∑®ÏÜåÎê®');
                return null;
            }

            handleError(err, 'Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®');
            return null;
        } finally {
            if (showLoading) {
                setLoading(false);
            }
            abortControllerRef.current = null;
        }
    }, [spreadsheetId, sheetName, range, authenticate, handleError, handleSuccess]);

    /**
     * Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® (Î°úÎî© ÏÉÅÌÉú ÌëúÏãú)
     */
    const refetch = useCallback(() => {
        return fetchData({ showLoading: true });
    }, [fetchData]);

    /**
     * Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® (Î°úÎî© ÏÉÅÌÉú ÌëúÏãú ÏïàÌï®)
     */
    const refreshData = useCallback(() => {
        return fetchData({ showLoading: false });
    }, [fetchData]);

    /**
     * Îã§Î•∏ ÏãúÌä∏/Î≤îÏúÑÏùò Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
     */
    const fetchOtherSheet = useCallback((otherSpreadsheetId, otherSheetName, otherRange) => {
        return fetchData({
            showLoading: true,
            targetSpreadsheetId: otherSpreadsheetId,
            targetSheetName: otherSheetName,
            targetRange: otherRange
        });
    }, [fetchData]);

    /**
     * ÏóêÎü¨ ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
     */
    const clearError = useCallback(() => {
        setError(null);
    }, []);

    /**
     * Î™®Îì† ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
     */
    const reset = useCallback(() => {
        // ÏßÑÌñâ Ï§ëÏù∏ ÏöîÏ≤≠ Ï∑®ÏÜå
        if (abortControllerRef.current) {
            abortControllerRef.current.abort();
        }

        // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® Ï†ïÏßÄ
        if (intervalRef.current) {
            clearInterval(intervalRef.current);
            intervalRef.current = null;
        }

        // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
        setData(null);
        setLoading(false);
        setError(null);
        setLastFetch(null);
        isAuthenticatedRef.current = false;
    }, []);

    /**
     * Ïù∏Ï¶ù ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
     */
    const clearAuth = useCallback(() => {
        googleSheetsAuth.clearAuthentication();
        isAuthenticatedRef.current = false;
    }, []);

    // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÏûêÎèô Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    useEffect(() => {
        if (autoFetch) {
            fetchData();
        }

        // ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® ÏÑ§Ï†ï
        if (refetchInterval > 0) {
            intervalRef.current = setInterval(() => {
                refreshData();
            }, refetchInterval);
        }

        // ÌÅ¥Î¶∞ÏóÖ Ìï®Ïàò
        return () => {
            if (abortControllerRef.current) {
                abortControllerRef.current.abort();
            }
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, [autoFetch, refetchInterval, fetchData, refreshData]);

    // ÌååÎùºÎØ∏ÌÑ∞ Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ Îã§Ïãú Í∞ÄÏ†∏Ïò§Í∏∞
    useEffect(() => {
        if (autoFetch && (spreadsheetId || sheetName || range)) {
            fetchData();
        }
    }, [spreadsheetId, sheetName, range, autoFetch, fetchData]);

    // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ï†ïÎ¶¨
    useEffect(() => {
        return () => {
            if (abortControllerRef.current) {
                abortControllerRef.current.abort();
            }
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, []);

    // Î∞òÌôòÍ∞í
    return {
        // Îç∞Ïù¥ÌÑ∞ ÏÉÅÌÉú
        data,
        loading,
        error,
        lastFetch,

        // Îç∞Ïù¥ÌÑ∞ Ï†ïÎ≥¥ (dataÍ∞Ä ÏûàÏùÑ ÎïåÎßå)
        headers: data?.headers || [],
        rows: data?.rows || [],
        dataRows: data?.dataRows || [],
        totalRows: data?.totalRows || 0,
        dataRowCount: data?.dataRowCount || 0,
        hasData: data?.hasData || false,

        // Î©îÏÑúÎìú
        refetch,
        refreshData,
        fetchOtherSheet,
        clearError,
        reset,
        clearAuth,

        // Ïù∏Ï¶ù ÏÉÅÌÉú
        isAuthenticated: googleSheetsAuth.isAuthenticated(),
        authStatus: googleSheetsAuth.getAuthStatus(),

        // ÏÑ§Ï†ï Ï†ïÎ≥¥
        config: {
            spreadsheetId,
            sheetName,
            range,
            autoFetch,
            refetchInterval
        }
    };
};

/**
 * ÌäπÏ†ï ÏÖÄ Í∞íÎßå Í∞ÄÏ†∏Ïò§Îäî ÌõÖ
 */
export const useGoogleSheetsCell = (cellAddress, options = {}) => {
    const [cellValue, setCellValue] = useState('');
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const {
        spreadsheetId = SHEETS_CONFIG.spreadsheetId,
        sheetName = SHEETS_CONFIG.sheetName,
        autoFetch = true
    } = options;

    const fetchCellValue = useCallback(async () => {
        if (!cellAddress) return;

        try {
            setLoading(true);
            setError(null);

            // Ïù∏Ï¶ù ÌôïÏù∏
            if (!googleSheetsAuth.isAuthenticated()) {
                await googleSheetsAuth.authenticate();
            }

            const value = await googleSheetsData.getCellValue(spreadsheetId, sheetName, cellAddress);
            setCellValue(value);

        } catch (err) {
            setError(err.message);
            console.error('ÏÖÄ Í∞í Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', err);
        } finally {
            setLoading(false);
        }
    }, [cellAddress, spreadsheetId, sheetName]);

    useEffect(() => {
        if (autoFetch && cellAddress) {
            fetchCellValue();
        }
    }, [autoFetch, cellAddress, fetchCellValue]);

    return {
        cellValue,
        loading,
        error,
        refetch: fetchCellValue
    };
};

/**
 * Ïó¨Îü¨ Î≤îÏúÑÏùò Îç∞Ïù¥ÌÑ∞Î•º Ìïú Î≤àÏóê Í∞ÄÏ†∏Ïò§Îäî ÌõÖ
 */
export const useGoogleSheetsBatch = (ranges, options = {}) => {
    const [batchData, setBatchData] = useState({});
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    const {
        spreadsheetId = SHEETS_CONFIG.spreadsheetId,
        autoFetch = true
    } = options;

    const fetchBatchData = useCallback(async () => {
        if (!ranges || ranges.length === 0) return;

        try {
            setLoading(true);
            setError(null);

            // Ïù∏Ï¶ù ÌôïÏù∏
            if (!googleSheetsAuth.isAuthenticated()) {
                await googleSheetsAuth.authenticate();
            }

            const data = await googleSheetsData.getBatchData(spreadsheetId, ranges);
            setBatchData(data);

        } catch (err) {
            setError(err.message);
            console.error('Î∞∞Ïπò Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', err);
        } finally {
            setLoading(false);
        }
    }, [ranges, spreadsheetId]);

    useEffect(() => {
        if (autoFetch && ranges && ranges.length > 0) {
            fetchBatchData();
        }
    }, [autoFetch, ranges, fetchBatchData]);

    return {
        batchData,
        loading,
        error,
        refetch: fetchBatchData
    };
};

export default useGoogleSheets;